#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt matrix

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
      configURL:
        description: "please input configURL"
        required: true
      diskfree:
        description: "show disk free space"
        required: false
        default: "false"
      singlethread:
        description: "use single thread to compile"
        required: false
        default: "false"        

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FUNCS_SH: funcs.sh
  CORRECT_VERMAGIC: correct-vermagic.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_BASHUPLOAD: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  getmatrix:
    runs-on: ubuntu-latest
    steps:
      - id: get-matrix-fromURL
        run: echo "config_matrix=$(curl ${{ github.event.inputs.configURL }})" >> $GITHUB_OUTPUT
    outputs:
      config_matrix: ${{ steps.get-matrix-fromURL.outputs.config_matrix }}

  build:
    needs: getmatrix
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.getmatrix.outputs.config_matrix) }}

    steps:
      - name: Check Server Performance
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          
      - name: "Optimize Disk Space"
        uses: "hugoalh/disk-space-optimizer-ghaction@main"
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: Freeing up disk space
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 10240
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout
        uses: actions/checkout@main          

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libssh2-1-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev python3-setuptools
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
          /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
          sudo timedatectl set-timezone "$TZ"

          sudo chown $USER:$GROUPS $GITHUB_WORKSPACE
          sudo sed -i "1i alias next='touch /tmp/continue'" /etc/profile
          sudo sed -i "1i alias ll='ls -la'" /etc/profile
          sudo bash -c 'cat ~/.bashrc >> /etc/profile'

      - name: Get Config file
        run: |
          wget ${{ matrix.config }} -O $CONFIG_FILE
          ver=$(grep 'DESTVER=' $CONFIG_FILE | cut -d = -f 2)
          if [ -z "$ver" ]; then
            echo "ERROR: 未在配置文件中找到 DESTVER 字段" >&2
            exit 1
          fi
          echo "DESTVER=$ver" >> $GITHUB_ENV

      - name: Clone source code
        run: |
          df -hT $PWD
          echo "git clone --depth=1 $REPO_URL -b v${{ env.DESTVER }} openwrt"
          git clone --depth=1 $REPO_URL -b v${{ env.DESTVER }} openwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH $FUNCS_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          set -e
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Correct vermagic
        id: vermagic
        run: |
          set -e
          chmod +x $CORRECT_VERMAGIC
          cd openwrt
          $GITHUB_WORKSPACE/$CORRECT_VERMAGIC $GITHUB_WORKSPACE/$CONFIG_FILE

      - name: Compile the firmware
        id: compile
        timeout-minutes: 360
        run: |
          set +e
          cd openwrt
          logfile=configurl.log
          cp .config ${{ env.TARGET }}.config
          sed -i "1i # DESTVER=${{ env.VER }}" ${{ env.TARGET }}.config
          dl=$(curl -s -F"file=@${{ env.TARGET }}.config" -F"expires=24" https://0x0.st | tee $logfile)
          echo "dl=$dl" >> $GITHUB_OUTPUT
          curl https://bashupload.com/${{ env.TARGET }}.config --data-binary @${{ env.TARGET }}.config | tee $logfile
          echo "url=$(cat $logfile | grep wget | cut -f 2)" >> $GITHUB_OUTPUT

          if ${{ github.event.inputs.diskfree == 'true' }}; then
            $GITHUB_WORKSPACE/$FUNCS_SH df &
          fi

          if ${{ github.event.inputs.singlethread == 'true' }}; then
            echo -e "\033[34m 单线程编译 ! \033[0m"
            make -j1 V=s
            status=$?
          else
            echo -e "\033[34m $(nproc) thread compile ! \033[0m"
            make -j$(nproc)
            status=$?
            if [ $status -ne 0 ]; then
              echo -e "\033[31m多线程编译失败,尝试单线程编译\033[0m"
              make -j1 V=s
              status=$?
            fi            
          fi

          if [ $status == 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "Compile failed" >&2
            exit 1
          fi
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: ${{ !cancelled() }}
        run: |
          set -e
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo ${{ env.TARGET }}
          cp $GITHUB_WORKSPACE/openwrt/.config ${{ env.TARGET }}.config
          sed -i "1i # DESTVER=${{ env.DESTVER }}" ${{ env.TARGET }}.config
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Package firmware
        id: packfile
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |
          logfile=/tmp/packfile.log
          cd ${{ env.FIRMWARE }}
          zip -r ${{ env.ZIPNAME }} .
          $GITHUB_WORKSPACE/$FUNCS_SH progress $logfile &          

      - name: Upload firmware to bashupload
        id: transfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_BASHUPLOAD == 'true' && !cancelled()
        run: |
          set -e
          logfile=transfer.log
          urllog=url.log
          cd ${{ env.FIRMWARE }}
          zip -r ${{ env.ZIPNAME }} .
          $GITHUB_WORKSPACE/$FUNCS_SH progress $logfile &
          curl https://bashupload.com/${{ env.ZIPNAME }} --data-binary @${{ env.ZIPNAME }} -o $urllog 2>$logfile
          echo "url=$(cat $urllog | grep wget | cut -f 2)" |tee -a $GITHUB_OUTPUT

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          set -e
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          [ $UPLOAD_BASHUPLOAD = true ] && echo "🔗 [BashUpload](${{ steps.transfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
